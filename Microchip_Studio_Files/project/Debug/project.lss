
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00000a24  00000a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af0  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000791  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000506  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ed  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000276  00000000  00000000  00002aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 39       	cpi	r26, 0x9C	; 156
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  8e:	0c 94 10 05 	jmp	0xa20	; 0xa20 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z12LED_PWM_Initv>:
#define LED_PIN PD6  // Use PD6 for PWM with Timer0
#define POTENTIOMETER_PIN PC1
#define SWITCH_PIN PC2    // Define pin for the on/off switch

void LED_PWM_Init() {
	DDRD |= (1 << LED_PIN);  // Set PD6 as output for PWM
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << COM0A1) | (1 << WGM00) | (1 << WGM01);  // Fast PWM, non-inverting
  9c:	83 e8       	ldi	r24, 0x83	; 131
  9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01);  // Prescaler = 8
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	85 bd       	out	0x25, r24	; 37
  a4:	08 95       	ret

000000a6 <_Z10USART_Initj>:
}

void USART_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);  // Set baud rate high byte
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;          // Set baud rate low byte
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Enable RX and TX
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // 8 data bits, 1 stop bit
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	08 95       	ret

000000bc <_Z14USART_Transmith>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Wait until buffer is empty
  bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <_Z14USART_Transmith>
	UDR0 = data;  // Transmit data
  c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c8:	08 95       	ret

000000ca <_Z13USART_Receivev>:
}

unsigned char USART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Wait until data is received
  ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ce:	88 23       	and	r24, r24
  d0:	e4 f7       	brge	.-8      	; 0xca <_Z13USART_Receivev>
	return UDR0;  // Return received data
  d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  d6:	08 95       	ret

000000d8 <_Z16USART_SendStringPKc>:

void USART_SendString(const char* str) {
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
	while (*str) {
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	21 f0       	breq	.+8      	; 0xec <_Z16USART_SendStringPKc+0x14>
		USART_Transmit(*str++);  // Transmit each character
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z14USART_Transmith>
	while (!(UCSR0A & (1 << RXC0)));  // Wait until data is received
	return UDR0;  // Return received data
}

void USART_SendString(const char* str) {
	while (*str) {
  ea:	f9 cf       	rjmp	.-14     	; 0xde <_Z16USART_SendStringPKc+0x6>
		USART_Transmit(*str++);  // Transmit each character
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <_Z8ADC_Initv>:

void ADC_Init() {
	ADMUX = (1 << REFS0);  // AVcc with external capacitor at AREF
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // Enable ADC, Prescaler = 64
  f8:	86 e8       	ldi	r24, 0x86	; 134
  fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fe:	08 95       	ret

00000100 <_Z18read_potentiometerv>:
}

uint16_t read_potentiometer() {
	ADMUX = (ADMUX & 0xF0) | POTENTIOMETER_PIN;  // Select ADC channel PC1
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start conversion
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));  // Wait for conversion to complete
 116:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11a:	86 fd       	sbrc	r24, 6
 11c:	fc cf       	rjmp	.-8      	; 0x116 <_Z18read_potentiometerv+0x16>
	return ADC;  // Return ADC value
 11e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 122:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 126:	08 95       	ret

00000128 <_Z12sounder_initv>:

void sounder_init() {
	DDRB |= (1 << SOUNDER_PIN);  // Set PB2 as output
 128:	84 b1       	in	r24, 0x04	; 4
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1B0);  // Toggle OC1B (PB2) on Compare Match
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10);  // CTC mode, no prescaler
 134:	89 e0       	ldi	r24, 0x09	; 9
 136:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 13a:	08 95       	ret

0000013c <_Z21set_sounder_frequencyj>:
}

void set_sounder_frequency(uint16_t frequency) {
	OCR1A = (F_CPU / (2 * frequency)) - 1;  // Set the compare match value for Timer 1
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	9c 01       	movw	r18, r24
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	74 e2       	ldi	r23, 0x24	; 36
 14a:	84 ef       	ldi	r24, 0xF4	; 244
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodsi4>
 152:	21 50       	subi	r18, 0x01	; 1
 154:	31 09       	sbc	r19, r1
 156:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 15e:	08 95       	ret

00000160 <_Z18set_LED_brightnessh>:
}

void set_LED_brightness(uint8_t brightness) {
	OCR0A = brightness;  // Set LED brightness (0-255)
 160:	87 bd       	out	0x27, r24	; 39
 162:	08 95       	ret

00000164 <_Z20enter_low_power_modev>:
}

void enter_low_power_mode() {
	SMCR = (1 << SM1) | (1 << SE);  // Set sleep mode to power-save and enable sleep
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	83 bf       	out	0x33, r24	; 51
	asm("sleep");  // Put the MCU to sleep
 168:	88 95       	sleep
 16a:	08 95       	ret

0000016c <main>:
}

int main(void) {
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	ec 97       	sbiw	r28, 0x3c	; 60
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);  // Initialize USART
 180:	87 e6       	ldi	r24, 0x67	; 103
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	ADC_Init();          // Initialize ADC
 188:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z8ADC_Initv>
	LED_PWM_Init(); // Initialize LED PWM on PD6
 18c:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12LED_PWM_Initv>
	sounder_init();      // Initialize sounder
 190:	0e 94 94 00 	call	0x128	; 0x128 <_Z12sounder_initv>

	DDRC &= ~(1 << SWITCH_PIN);  // Set SWITCH_PIN as input
 194:	87 b1       	in	r24, 0x07	; 7
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << SWITCH_PIN);  // Enable pull-up resistor on SWITCH_PIN
 19a:	88 b1       	in	r24, 0x08	; 8
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	88 b9       	out	0x08, r24	; 8

	uint16_t potentiometer_value;
	uint16_t frequency = 50;  // Initial frequency
	char input_buffer[10] = {0};
 1a0:	fe 01       	movw	r30, r28
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	df 01       	movw	r26, r30
 1a8:	1d 92       	st	X+, r1
 1aa:	8a 95       	dec	r24
 1ac:	e9 f7       	brne	.-6      	; 0x1a8 <main+0x3c>
	uint8_t input_index = 0;
	uint16_t print_counter = 0;  // For periodic printing
	char buffer[50];

	sei();  // Enable global interrupts
 1ae:	78 94       	sei

	uint16_t potentiometer_value;
	uint16_t frequency = 50;  // Initial frequency
	char input_buffer[10] = {0};
	uint8_t input_index = 0;
	uint16_t print_counter = 0;  // For periodic printing
 1b0:	e1 2c       	mov	r14, r1
 1b2:	f1 2c       	mov	r15, r1
	PORTC |= (1 << SWITCH_PIN);  // Enable pull-up resistor on SWITCH_PIN

	uint16_t potentiometer_value;
	uint16_t frequency = 50;  // Initial frequency
	char input_buffer[10] = {0};
	uint8_t input_index = 0;
 1b4:	d1 2c       	mov	r13, r1

	DDRC &= ~(1 << SWITCH_PIN);  // Set SWITCH_PIN as input
	PORTC |= (1 << SWITCH_PIN);  // Enable pull-up resistor on SWITCH_PIN

	uint16_t potentiometer_value;
	uint16_t frequency = 50;  // Initial frequency
 1b6:	02 e3       	ldi	r16, 0x32	; 50
 1b8:	10 e0       	ldi	r17, 0x00	; 0
	char buffer[50];

	sei();  // Enable global interrupts

	while (1) {
		if (PINC & (1 << SWITCH_PIN)) {  // If switch is OFF (high state)
 1ba:	32 9b       	sbis	0x06, 2	; 6
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <main+0x58>
			enter_low_power_mode();
 1be:	0e 94 b2 00 	call	0x164	; 0x164 <_Z20enter_low_power_modev>
 1c2:	fb cf       	rjmp	.-10     	; 0x1ba <main+0x4e>
			} else {  // If switch is ON (low state)
			if (print_counter >= 2000) {  // Approximately every 2 seconds
 1c4:	b0 ed       	ldi	r27, 0xD0	; 208
 1c6:	eb 16       	cp	r14, r27
 1c8:	b7 e0       	ldi	r27, 0x07	; 7
 1ca:	fb 06       	cpc	r15, r27
 1cc:	d8 f0       	brcs	.+54     	; 0x204 <main+0x98>
				snprintf(buffer, sizeof(buffer), "\nFrequency is %u Hz\n", frequency);
 1ce:	1f 93       	push	r17
 1d0:	0f 93       	push	r16
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	1f 92       	push	r1
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	8f 93       	push	r24
 1e0:	7e 01       	movw	r14, r28
 1e2:	2b e0       	ldi	r18, 0x0B	; 11
 1e4:	e2 0e       	add	r14, r18
 1e6:	f1 1c       	adc	r15, r1
 1e8:	ff 92       	push	r15
 1ea:	ef 92       	push	r14
 1ec:	0e 94 18 02 	call	0x430	; 0x430 <snprintf>
				USART_SendString(buffer);
 1f0:	c7 01       	movw	r24, r14
 1f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z16USART_SendStringPKc>
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
				print_counter = 0;  // Reset the counter
 200:	e1 2c       	mov	r14, r1
 202:	f1 2c       	mov	r15, r1
			}

			if (UCSR0A & (1 << RXC0)) {  // Check if data is received
 204:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 208:	88 23       	and	r24, r24
 20a:	0c f0       	brlt	.+2      	; 0x20e <main+0xa2>
 20c:	96 c0       	rjmp	.+300    	; 0x33a <main+0x1ce>
				char command = USART_Receive();  // Receive character
 20e:	0e 94 65 00 	call	0xca	; 0xca <_Z13USART_Receivev>

				// Handle '+' and '-' commands for immediate frequency change
				if (command == '+' || command == '-') {
 212:	8b 32       	cpi	r24, 0x2B	; 43
 214:	11 f0       	breq	.+4      	; 0x21a <main+0xae>
 216:	8d 32       	cpi	r24, 0x2D	; 45
 218:	69 f5       	brne	.+90     	; 0x274 <main+0x108>
					// Update frequency when receiving '+' or '-'
					frequency += (command == '+') ? 10 : -10;
 21a:	8b 32       	cpi	r24, 0x2B	; 43
 21c:	19 f4       	brne	.+6      	; 0x224 <main+0xb8>
 21e:	2a e0       	ldi	r18, 0x0A	; 10
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <main+0xbc>
 224:	26 ef       	ldi	r18, 0xF6	; 246
 226:	3f ef       	ldi	r19, 0xFF	; 255
 228:	20 0f       	add	r18, r16
 22a:	31 1f       	adc	r19, r17

					// Ensure frequency stays within valid range (50-1000 Hz)
					if (frequency < 50) frequency = 50;
 22c:	22 33       	cpi	r18, 0x32	; 50
 22e:	31 05       	cpc	r19, r1
 230:	10 f4       	brcc	.+4      	; 0x236 <main+0xca>
 232:	22 e3       	ldi	r18, 0x32	; 50
 234:	30 e0       	ldi	r19, 0x00	; 0
					if (frequency > 1000) frequency = 1000;
 236:	29 3e       	cpi	r18, 0xE9	; 233
 238:	93 e0       	ldi	r25, 0x03	; 3
 23a:	39 07       	cpc	r19, r25
 23c:	10 f0       	brcs	.+4      	; 0x242 <main+0xd6>
 23e:	28 ee       	ldi	r18, 0xE8	; 232
 240:	33 e0       	ldi	r19, 0x03	; 3

					// Print the updated frequency immediately after change
					snprintf(buffer, sizeof(buffer), "\nFrequency updated to: %u Hz\n", frequency);
 242:	3f 93       	push	r19
 244:	2f 93       	push	r18
 246:	85 e1       	ldi	r24, 0x15	; 21
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	9f 93       	push	r25
 24c:	8f 93       	push	r24
 24e:	1f 92       	push	r1
 250:	82 e3       	ldi	r24, 0x32	; 50
 252:	8f 93       	push	r24
 254:	8e 01       	movw	r16, r28
 256:	05 5f       	subi	r16, 0xF5	; 245
 258:	1f 4f       	sbci	r17, 0xFF	; 255
 25a:	1f 93       	push	r17
 25c:	0f 93       	push	r16
 25e:	0e 94 18 02 	call	0x430	; 0x430 <snprintf>
					USART_SendString(buffer);
 262:	c8 01       	movw	r24, r16
 264:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z16USART_SendStringPKc>
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	63 c0       	rjmp	.+198    	; 0x33a <main+0x1ce>

					} else if ((command >= '0' && command <= '9') || command == '\n' || command == '\r') {
 274:	90 ed       	ldi	r25, 0xD0	; 208
 276:	98 0f       	add	r25, r24
 278:	9a 30       	cpi	r25, 0x0A	; 10
 27a:	28 f0       	brcs	.+10     	; 0x286 <main+0x11a>
 27c:	8a 30       	cpi	r24, 0x0A	; 10
 27e:	19 f0       	breq	.+6      	; 0x286 <main+0x11a>
 280:	8d 30       	cpi	r24, 0x0D	; 13
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x11a>
 284:	5a c0       	rjmp	.+180    	; 0x33a <main+0x1ce>
					// If the command is a digit, append it to the input buffer
					if (command >= '0' && command <= '9') {
 286:	9a 30       	cpi	r25, 0x0A	; 10
 288:	40 f4       	brcc	.+16     	; 0x29a <main+0x12e>
						input_buffer[input_index++] = command;
 28a:	e1 e0       	ldi	r30, 0x01	; 1
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ec 0f       	add	r30, r28
 290:	fd 1f       	adc	r31, r29
 292:	ed 0d       	add	r30, r13
 294:	f1 1d       	adc	r31, r1
 296:	80 83       	st	Z, r24
 298:	d3 94       	inc	r13
					}
					
					// When the Enter key is pressed
					if (command == '\n' || command == '\r') {
 29a:	8a 30       	cpi	r24, 0x0A	; 10
 29c:	19 f0       	breq	.+6      	; 0x2a4 <main+0x138>
 29e:	8d 30       	cpi	r24, 0x0D	; 13
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <main+0x138>
 2a2:	4b c0       	rjmp	.+150    	; 0x33a <main+0x1ce>
						input_buffer[input_index] = '\0';  // Null-terminate the string
 2a4:	e1 e0       	ldi	r30, 0x01	; 1
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ec 0f       	add	r30, r28
 2aa:	fd 1f       	adc	r31, r29
 2ac:	ed 0d       	add	r30, r13
 2ae:	f1 1d       	adc	r31, r1
 2b0:	10 82       	st	Z, r1

						// Convert the input buffer to an integer (new frequency)
						uint16_t new_frequency = atoi(input_buffer);
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <atoi>
 2ba:	8c 01       	movw	r16, r24

						// Print the received value of new_frequency before checking the range
						snprintf(buffer, sizeof(buffer), "\nReceived frequency: %u Hz\n", new_frequency);
 2bc:	1f 93       	push	r17
 2be:	8f 93       	push	r24
 2c0:	83 e3       	ldi	r24, 0x33	; 51
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	9f 93       	push	r25
 2c6:	8f 93       	push	r24
 2c8:	1f 92       	push	r1
 2ca:	82 e3       	ldi	r24, 0x32	; 50
 2cc:	8f 93       	push	r24
 2ce:	6e 01       	movw	r12, r28
 2d0:	bb e0       	ldi	r27, 0x0B	; 11
 2d2:	cb 0e       	add	r12, r27
 2d4:	d1 1c       	adc	r13, r1
 2d6:	df 92       	push	r13
 2d8:	cf 92       	push	r12
 2da:	0e 94 18 02 	call	0x430	; 0x430 <snprintf>
						USART_SendString(buffer);  // Print the new_frequency value
 2de:	c6 01       	movw	r24, r12
 2e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z16USART_SendStringPKc>

						// Check if the new frequency is within the valid range
						if (new_frequency >= 50 && new_frequency <= 1000) {
 2e4:	c8 01       	movw	r24, r16
 2e6:	c2 97       	sbiw	r24, 0x32	; 50
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	87 3b       	cpi	r24, 0xB7	; 183
 2f4:	93 40       	sbci	r25, 0x03	; 3
 2f6:	e0 f4       	brcc	.+56     	; 0x330 <main+0x1c4>
							frequency = new_frequency;  // Set the frequency to the input value
							USART_SendString("\nFrequency set to: ");
 2f8:	8f e4       	ldi	r24, 0x4F	; 79
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z16USART_SendStringPKc>
							snprintf(buffer, sizeof(buffer), "%u Hz\n", new_frequency);  // Print the new frequency
 300:	1f 93       	push	r17
 302:	0f 93       	push	r16
 304:	8c e2       	ldi	r24, 0x2C	; 44
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	9f 93       	push	r25
 30a:	8f 93       	push	r24
 30c:	1f 92       	push	r1
 30e:	82 e3       	ldi	r24, 0x32	; 50
 310:	8f 93       	push	r24
 312:	86 01       	movw	r16, r12
 314:	1f 93       	push	r17
 316:	cf 92       	push	r12
 318:	0e 94 18 02 	call	0x430	; 0x430 <snprintf>
							USART_SendString(buffer);
 31c:	c6 01       	movw	r24, r12
 31e:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z16USART_SendStringPKc>
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
							} else {
							USART_SendString("\nInvalid frequency. Enter a value between 50 and 1000.\n");
						}

						// Reset input buffer for the next input
						input_index = 0;
 32c:	d1 2c       	mov	r13, r1
 32e:	05 c0       	rjmp	.+10     	; 0x33a <main+0x1ce>
							frequency = new_frequency;  // Set the frequency to the input value
							USART_SendString("\nFrequency set to: ");
							snprintf(buffer, sizeof(buffer), "%u Hz\n", new_frequency);  // Print the new frequency
							USART_SendString(buffer);
							} else {
							USART_SendString("\nInvalid frequency. Enter a value between 50 and 1000.\n");
 330:	83 e6       	ldi	r24, 0x63	; 99
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z16USART_SendStringPKc>
						}

						// Reset input buffer for the next input
						input_index = 0;
 338:	d1 2c       	mov	r13, r1
					}
				}
			}


			potentiometer_value = read_potentiometer();
 33a:	0e 94 80 00 	call	0x100	; 0x100 <_Z18read_potentiometerv>
			uint16_t pot_frequency = 50 + ((potentiometer_value * 950UL) / 1023);
 33e:	9c 01       	movw	r18, r24
 340:	a6 eb       	ldi	r26, 0xB6	; 182
 342:	b3 e0       	ldi	r27, 0x03	; 3
 344:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__umulhisi3>
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	33 e0       	ldi	r19, 0x03	; 3
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodsi4>
 354:	89 01       	movw	r16, r18
 356:	0e 5c       	subi	r16, 0xCE	; 206
 358:	1f 4f       	sbci	r17, 0xFF	; 255
			frequency = pot_frequency;

			set_sounder_frequency(frequency);  // Set the sounder frequency
 35a:	c8 01       	movw	r24, r16
 35c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z21set_sounder_frequencyj>
			set_LED_brightness((frequency / 4) % 256); // Control brightness of LED on PD6 using hardware PWM
 360:	c8 01       	movw	r24, r16
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	0e 94 b0 00 	call	0x160	; 0x160 <_Z18set_LED_brightnessh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	a9 ef       	ldi	r26, 0xF9	; 249
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	11 97       	sbiw	r26, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x206>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x20c>
 378:	00 00       	nop
			
			_delay_ms(1);
			print_counter++;
 37a:	bf ef       	ldi	r27, 0xFF	; 255
 37c:	eb 1a       	sub	r14, r27
 37e:	fb 0a       	sbc	r15, r27
 380:	1c cf       	rjmp	.-456    	; 0x1ba <main+0x4e>

00000382 <__udivmodsi4>:
 382:	a1 e2       	ldi	r26, 0x21	; 33
 384:	1a 2e       	mov	r1, r26
 386:	aa 1b       	sub	r26, r26
 388:	bb 1b       	sub	r27, r27
 38a:	fd 01       	movw	r30, r26
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <__udivmodsi4_ep>

0000038e <__udivmodsi4_loop>:
 38e:	aa 1f       	adc	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	ee 1f       	adc	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	a2 17       	cp	r26, r18
 398:	b3 07       	cpc	r27, r19
 39a:	e4 07       	cpc	r30, r20
 39c:	f5 07       	cpc	r31, r21
 39e:	20 f0       	brcs	.+8      	; 0x3a8 <__udivmodsi4_ep>
 3a0:	a2 1b       	sub	r26, r18
 3a2:	b3 0b       	sbc	r27, r19
 3a4:	e4 0b       	sbc	r30, r20
 3a6:	f5 0b       	sbc	r31, r21

000003a8 <__udivmodsi4_ep>:
 3a8:	66 1f       	adc	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	1a 94       	dec	r1
 3b2:	69 f7       	brne	.-38     	; 0x38e <__udivmodsi4_loop>
 3b4:	60 95       	com	r22
 3b6:	70 95       	com	r23
 3b8:	80 95       	com	r24
 3ba:	90 95       	com	r25
 3bc:	9b 01       	movw	r18, r22
 3be:	ac 01       	movw	r20, r24
 3c0:	bd 01       	movw	r22, r26
 3c2:	cf 01       	movw	r24, r30
 3c4:	08 95       	ret

000003c6 <__umulhisi3>:
 3c6:	a2 9f       	mul	r26, r18
 3c8:	b0 01       	movw	r22, r0
 3ca:	b3 9f       	mul	r27, r19
 3cc:	c0 01       	movw	r24, r0
 3ce:	a3 9f       	mul	r26, r19
 3d0:	70 0d       	add	r23, r0
 3d2:	81 1d       	adc	r24, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	91 1d       	adc	r25, r1
 3d8:	b2 9f       	mul	r27, r18
 3da:	70 0d       	add	r23, r0
 3dc:	81 1d       	adc	r24, r1
 3de:	11 24       	eor	r1, r1
 3e0:	91 1d       	adc	r25, r1
 3e2:	08 95       	ret

000003e4 <atoi>:
 3e4:	fc 01       	movw	r30, r24
 3e6:	88 27       	eor	r24, r24
 3e8:	99 27       	eor	r25, r25
 3ea:	e8 94       	clt
 3ec:	21 91       	ld	r18, Z+
 3ee:	20 32       	cpi	r18, 0x20	; 32
 3f0:	e9 f3       	breq	.-6      	; 0x3ec <atoi+0x8>
 3f2:	29 30       	cpi	r18, 0x09	; 9
 3f4:	10 f0       	brcs	.+4      	; 0x3fa <atoi+0x16>
 3f6:	2e 30       	cpi	r18, 0x0E	; 14
 3f8:	c8 f3       	brcs	.-14     	; 0x3ec <atoi+0x8>
 3fa:	2b 32       	cpi	r18, 0x2B	; 43
 3fc:	41 f0       	breq	.+16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fe:	2d 32       	cpi	r18, 0x2D	; 45
 400:	39 f4       	brne	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 402:	68 94       	set
 404:	04 c0       	rjmp	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 406:	0e 94 10 02 	call	0x420	; 0x420 <__mulhi_const_10>
 40a:	82 0f       	add	r24, r18
 40c:	91 1d       	adc	r25, r1
 40e:	21 91       	ld	r18, Z+
 410:	20 53       	subi	r18, 0x30	; 48
 412:	2a 30       	cpi	r18, 0x0A	; 10
 414:	c0 f3       	brcs	.-16     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 416:	1e f4       	brtc	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 418:	90 95       	com	r25
 41a:	81 95       	neg	r24
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
 41e:	08 95       	ret

00000420 <__mulhi_const_10>:
 420:	7a e0       	ldi	r23, 0x0A	; 10
 422:	97 9f       	mul	r25, r23
 424:	90 2d       	mov	r25, r0
 426:	87 9f       	mul	r24, r23
 428:	80 2d       	mov	r24, r0
 42a:	91 0d       	add	r25, r1
 42c:	11 24       	eor	r1, r1
 42e:	08 95       	ret

00000430 <snprintf>:
 430:	ae e0       	ldi	r26, 0x0E	; 14
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ee e1       	ldi	r30, 0x1E	; 30
 436:	f2 e0       	ldi	r31, 0x02	; 2
 438:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__prologue_saves__+0x1c>
 43c:	0d 89       	ldd	r16, Y+21	; 0x15
 43e:	1e 89       	ldd	r17, Y+22	; 0x16
 440:	8f 89       	ldd	r24, Y+23	; 0x17
 442:	98 8d       	ldd	r25, Y+24	; 0x18
 444:	26 e0       	ldi	r18, 0x06	; 6
 446:	2c 83       	std	Y+4, r18	; 0x04
 448:	1a 83       	std	Y+2, r17	; 0x02
 44a:	09 83       	std	Y+1, r16	; 0x01
 44c:	97 ff       	sbrs	r25, 7
 44e:	02 c0       	rjmp	.+4      	; 0x454 <snprintf+0x24>
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e8       	ldi	r25, 0x80	; 128
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	9e 83       	std	Y+6, r25	; 0x06
 458:	8d 83       	std	Y+5, r24	; 0x05
 45a:	ae 01       	movw	r20, r28
 45c:	45 5e       	subi	r20, 0xE5	; 229
 45e:	5f 4f       	sbci	r21, 0xFF	; 255
 460:	69 8d       	ldd	r22, Y+25	; 0x19
 462:	7a 8d       	ldd	r23, Y+26	; 0x1a
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	0e 94 48 02 	call	0x490	; 0x490 <vfprintf>
 46c:	4d 81       	ldd	r20, Y+5	; 0x05
 46e:	5e 81       	ldd	r21, Y+6	; 0x06
 470:	57 fd       	sbrc	r21, 7
 472:	0a c0       	rjmp	.+20     	; 0x488 <snprintf+0x58>
 474:	2f 81       	ldd	r18, Y+7	; 0x07
 476:	38 85       	ldd	r19, Y+8	; 0x08
 478:	42 17       	cp	r20, r18
 47a:	53 07       	cpc	r21, r19
 47c:	0c f4       	brge	.+2      	; 0x480 <snprintf+0x50>
 47e:	9a 01       	movw	r18, r20
 480:	f8 01       	movw	r30, r16
 482:	e2 0f       	add	r30, r18
 484:	f3 1f       	adc	r31, r19
 486:	10 82       	st	Z, r1
 488:	2e 96       	adiw	r28, 0x0e	; 14
 48a:	e4 e0       	ldi	r30, 0x04	; 4
 48c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__epilogue_restores__+0x1c>

00000490 <vfprintf>:
 490:	ab e0       	ldi	r26, 0x0B	; 11
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	ee e4       	ldi	r30, 0x4E	; 78
 496:	f2 e0       	ldi	r31, 0x02	; 2
 498:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__prologue_saves__>
 49c:	6c 01       	movw	r12, r24
 49e:	7b 01       	movw	r14, r22
 4a0:	8a 01       	movw	r16, r20
 4a2:	fc 01       	movw	r30, r24
 4a4:	17 82       	std	Z+7, r1	; 0x07
 4a6:	16 82       	std	Z+6, r1	; 0x06
 4a8:	83 81       	ldd	r24, Z+3	; 0x03
 4aa:	81 ff       	sbrs	r24, 1
 4ac:	cc c1       	rjmp	.+920    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 4ae:	ce 01       	movw	r24, r28
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	3c 01       	movw	r6, r24
 4b4:	f6 01       	movw	r30, r12
 4b6:	93 81       	ldd	r25, Z+3	; 0x03
 4b8:	f7 01       	movw	r30, r14
 4ba:	93 fd       	sbrc	r25, 3
 4bc:	85 91       	lpm	r24, Z+
 4be:	93 ff       	sbrs	r25, 3
 4c0:	81 91       	ld	r24, Z+
 4c2:	7f 01       	movw	r14, r30
 4c4:	88 23       	and	r24, r24
 4c6:	09 f4       	brne	.+2      	; 0x4ca <vfprintf+0x3a>
 4c8:	ba c1       	rjmp	.+884    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 4ca:	85 32       	cpi	r24, 0x25	; 37
 4cc:	39 f4       	brne	.+14     	; 0x4dc <vfprintf+0x4c>
 4ce:	93 fd       	sbrc	r25, 3
 4d0:	85 91       	lpm	r24, Z+
 4d2:	93 ff       	sbrs	r25, 3
 4d4:	81 91       	ld	r24, Z+
 4d6:	7f 01       	movw	r14, r30
 4d8:	85 32       	cpi	r24, 0x25	; 37
 4da:	29 f4       	brne	.+10     	; 0x4e6 <vfprintf+0x56>
 4dc:	b6 01       	movw	r22, r12
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 4e4:	e7 cf       	rjmp	.-50     	; 0x4b4 <vfprintf+0x24>
 4e6:	91 2c       	mov	r9, r1
 4e8:	21 2c       	mov	r2, r1
 4ea:	31 2c       	mov	r3, r1
 4ec:	ff e1       	ldi	r31, 0x1F	; 31
 4ee:	f3 15       	cp	r31, r3
 4f0:	d8 f0       	brcs	.+54     	; 0x528 <vfprintf+0x98>
 4f2:	8b 32       	cpi	r24, 0x2B	; 43
 4f4:	79 f0       	breq	.+30     	; 0x514 <vfprintf+0x84>
 4f6:	38 f4       	brcc	.+14     	; 0x506 <vfprintf+0x76>
 4f8:	80 32       	cpi	r24, 0x20	; 32
 4fa:	79 f0       	breq	.+30     	; 0x51a <vfprintf+0x8a>
 4fc:	83 32       	cpi	r24, 0x23	; 35
 4fe:	a1 f4       	brne	.+40     	; 0x528 <vfprintf+0x98>
 500:	23 2d       	mov	r18, r3
 502:	20 61       	ori	r18, 0x10	; 16
 504:	1d c0       	rjmp	.+58     	; 0x540 <vfprintf+0xb0>
 506:	8d 32       	cpi	r24, 0x2D	; 45
 508:	61 f0       	breq	.+24     	; 0x522 <vfprintf+0x92>
 50a:	80 33       	cpi	r24, 0x30	; 48
 50c:	69 f4       	brne	.+26     	; 0x528 <vfprintf+0x98>
 50e:	23 2d       	mov	r18, r3
 510:	21 60       	ori	r18, 0x01	; 1
 512:	16 c0       	rjmp	.+44     	; 0x540 <vfprintf+0xb0>
 514:	83 2d       	mov	r24, r3
 516:	82 60       	ori	r24, 0x02	; 2
 518:	38 2e       	mov	r3, r24
 51a:	e3 2d       	mov	r30, r3
 51c:	e4 60       	ori	r30, 0x04	; 4
 51e:	3e 2e       	mov	r3, r30
 520:	2a c0       	rjmp	.+84     	; 0x576 <vfprintf+0xe6>
 522:	f3 2d       	mov	r31, r3
 524:	f8 60       	ori	r31, 0x08	; 8
 526:	1d c0       	rjmp	.+58     	; 0x562 <vfprintf+0xd2>
 528:	37 fc       	sbrc	r3, 7
 52a:	2d c0       	rjmp	.+90     	; 0x586 <vfprintf+0xf6>
 52c:	20 ed       	ldi	r18, 0xD0	; 208
 52e:	28 0f       	add	r18, r24
 530:	2a 30       	cpi	r18, 0x0A	; 10
 532:	40 f0       	brcs	.+16     	; 0x544 <vfprintf+0xb4>
 534:	8e 32       	cpi	r24, 0x2E	; 46
 536:	b9 f4       	brne	.+46     	; 0x566 <vfprintf+0xd6>
 538:	36 fc       	sbrc	r3, 6
 53a:	81 c1       	rjmp	.+770    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 53c:	23 2d       	mov	r18, r3
 53e:	20 64       	ori	r18, 0x40	; 64
 540:	32 2e       	mov	r3, r18
 542:	19 c0       	rjmp	.+50     	; 0x576 <vfprintf+0xe6>
 544:	36 fe       	sbrs	r3, 6
 546:	06 c0       	rjmp	.+12     	; 0x554 <vfprintf+0xc4>
 548:	8a e0       	ldi	r24, 0x0A	; 10
 54a:	98 9e       	mul	r9, r24
 54c:	20 0d       	add	r18, r0
 54e:	11 24       	eor	r1, r1
 550:	92 2e       	mov	r9, r18
 552:	11 c0       	rjmp	.+34     	; 0x576 <vfprintf+0xe6>
 554:	ea e0       	ldi	r30, 0x0A	; 10
 556:	2e 9e       	mul	r2, r30
 558:	20 0d       	add	r18, r0
 55a:	11 24       	eor	r1, r1
 55c:	22 2e       	mov	r2, r18
 55e:	f3 2d       	mov	r31, r3
 560:	f0 62       	ori	r31, 0x20	; 32
 562:	3f 2e       	mov	r3, r31
 564:	08 c0       	rjmp	.+16     	; 0x576 <vfprintf+0xe6>
 566:	8c 36       	cpi	r24, 0x6C	; 108
 568:	21 f4       	brne	.+8      	; 0x572 <vfprintf+0xe2>
 56a:	83 2d       	mov	r24, r3
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	38 2e       	mov	r3, r24
 570:	02 c0       	rjmp	.+4      	; 0x576 <vfprintf+0xe6>
 572:	88 36       	cpi	r24, 0x68	; 104
 574:	41 f4       	brne	.+16     	; 0x586 <vfprintf+0xf6>
 576:	f7 01       	movw	r30, r14
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	7f 01       	movw	r14, r30
 582:	81 11       	cpse	r24, r1
 584:	b3 cf       	rjmp	.-154    	; 0x4ec <vfprintf+0x5c>
 586:	98 2f       	mov	r25, r24
 588:	9f 7d       	andi	r25, 0xDF	; 223
 58a:	95 54       	subi	r25, 0x45	; 69
 58c:	93 30       	cpi	r25, 0x03	; 3
 58e:	28 f4       	brcc	.+10     	; 0x59a <vfprintf+0x10a>
 590:	0c 5f       	subi	r16, 0xFC	; 252
 592:	1f 4f       	sbci	r17, 0xFF	; 255
 594:	9f e3       	ldi	r25, 0x3F	; 63
 596:	99 83       	std	Y+1, r25	; 0x01
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <vfprintf+0x124>
 59a:	83 36       	cpi	r24, 0x63	; 99
 59c:	31 f0       	breq	.+12     	; 0x5aa <vfprintf+0x11a>
 59e:	83 37       	cpi	r24, 0x73	; 115
 5a0:	71 f0       	breq	.+28     	; 0x5be <vfprintf+0x12e>
 5a2:	83 35       	cpi	r24, 0x53	; 83
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <vfprintf+0x118>
 5a6:	59 c0       	rjmp	.+178    	; 0x65a <vfprintf+0x1ca>
 5a8:	21 c0       	rjmp	.+66     	; 0x5ec <vfprintf+0x15c>
 5aa:	f8 01       	movw	r30, r16
 5ac:	80 81       	ld	r24, Z
 5ae:	89 83       	std	Y+1, r24	; 0x01
 5b0:	0e 5f       	subi	r16, 0xFE	; 254
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	88 24       	eor	r8, r8
 5b6:	83 94       	inc	r8
 5b8:	91 2c       	mov	r9, r1
 5ba:	53 01       	movw	r10, r6
 5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <vfprintf+0x154>
 5be:	28 01       	movw	r4, r16
 5c0:	f2 e0       	ldi	r31, 0x02	; 2
 5c2:	4f 0e       	add	r4, r31
 5c4:	51 1c       	adc	r5, r1
 5c6:	f8 01       	movw	r30, r16
 5c8:	a0 80       	ld	r10, Z
 5ca:	b1 80       	ldd	r11, Z+1	; 0x01
 5cc:	36 fe       	sbrs	r3, 6
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <vfprintf+0x146>
 5d0:	69 2d       	mov	r22, r9
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0x14a>
 5d6:	6f ef       	ldi	r22, 0xFF	; 255
 5d8:	7f ef       	ldi	r23, 0xFF	; 255
 5da:	c5 01       	movw	r24, r10
 5dc:	0e 94 34 04 	call	0x868	; 0x868 <strnlen>
 5e0:	4c 01       	movw	r8, r24
 5e2:	82 01       	movw	r16, r4
 5e4:	f3 2d       	mov	r31, r3
 5e6:	ff 77       	andi	r31, 0x7F	; 127
 5e8:	3f 2e       	mov	r3, r31
 5ea:	16 c0       	rjmp	.+44     	; 0x618 <vfprintf+0x188>
 5ec:	28 01       	movw	r4, r16
 5ee:	22 e0       	ldi	r18, 0x02	; 2
 5f0:	42 0e       	add	r4, r18
 5f2:	51 1c       	adc	r5, r1
 5f4:	f8 01       	movw	r30, r16
 5f6:	a0 80       	ld	r10, Z
 5f8:	b1 80       	ldd	r11, Z+1	; 0x01
 5fa:	36 fe       	sbrs	r3, 6
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <vfprintf+0x174>
 5fe:	69 2d       	mov	r22, r9
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <vfprintf+0x178>
 604:	6f ef       	ldi	r22, 0xFF	; 255
 606:	7f ef       	ldi	r23, 0xFF	; 255
 608:	c5 01       	movw	r24, r10
 60a:	0e 94 29 04 	call	0x852	; 0x852 <strnlen_P>
 60e:	4c 01       	movw	r8, r24
 610:	f3 2d       	mov	r31, r3
 612:	f0 68       	ori	r31, 0x80	; 128
 614:	3f 2e       	mov	r3, r31
 616:	82 01       	movw	r16, r4
 618:	33 fc       	sbrc	r3, 3
 61a:	1b c0       	rjmp	.+54     	; 0x652 <vfprintf+0x1c2>
 61c:	82 2d       	mov	r24, r2
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	88 16       	cp	r8, r24
 622:	99 06       	cpc	r9, r25
 624:	b0 f4       	brcc	.+44     	; 0x652 <vfprintf+0x1c2>
 626:	b6 01       	movw	r22, r12
 628:	80 e2       	ldi	r24, 0x20	; 32
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 630:	2a 94       	dec	r2
 632:	f4 cf       	rjmp	.-24     	; 0x61c <vfprintf+0x18c>
 634:	f5 01       	movw	r30, r10
 636:	37 fc       	sbrc	r3, 7
 638:	85 91       	lpm	r24, Z+
 63a:	37 fe       	sbrs	r3, 7
 63c:	81 91       	ld	r24, Z+
 63e:	5f 01       	movw	r10, r30
 640:	b6 01       	movw	r22, r12
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 648:	21 10       	cpse	r2, r1
 64a:	2a 94       	dec	r2
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	82 1a       	sub	r8, r18
 650:	91 08       	sbc	r9, r1
 652:	81 14       	cp	r8, r1
 654:	91 04       	cpc	r9, r1
 656:	71 f7       	brne	.-36     	; 0x634 <vfprintf+0x1a4>
 658:	e8 c0       	rjmp	.+464    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 65a:	84 36       	cpi	r24, 0x64	; 100
 65c:	11 f0       	breq	.+4      	; 0x662 <vfprintf+0x1d2>
 65e:	89 36       	cpi	r24, 0x69	; 105
 660:	41 f5       	brne	.+80     	; 0x6b2 <vfprintf+0x222>
 662:	f8 01       	movw	r30, r16
 664:	37 fe       	sbrs	r3, 7
 666:	07 c0       	rjmp	.+14     	; 0x676 <vfprintf+0x1e6>
 668:	60 81       	ld	r22, Z
 66a:	71 81       	ldd	r23, Z+1	; 0x01
 66c:	82 81       	ldd	r24, Z+2	; 0x02
 66e:	93 81       	ldd	r25, Z+3	; 0x03
 670:	0c 5f       	subi	r16, 0xFC	; 252
 672:	1f 4f       	sbci	r17, 0xFF	; 255
 674:	08 c0       	rjmp	.+16     	; 0x686 <vfprintf+0x1f6>
 676:	60 81       	ld	r22, Z
 678:	71 81       	ldd	r23, Z+1	; 0x01
 67a:	07 2e       	mov	r0, r23
 67c:	00 0c       	add	r0, r0
 67e:	88 0b       	sbc	r24, r24
 680:	99 0b       	sbc	r25, r25
 682:	0e 5f       	subi	r16, 0xFE	; 254
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	f3 2d       	mov	r31, r3
 688:	ff 76       	andi	r31, 0x6F	; 111
 68a:	3f 2e       	mov	r3, r31
 68c:	97 ff       	sbrs	r25, 7
 68e:	09 c0       	rjmp	.+18     	; 0x6a2 <vfprintf+0x212>
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	f0 68       	ori	r31, 0x80	; 128
 6a0:	3f 2e       	mov	r3, r31
 6a2:	2a e0       	ldi	r18, 0x0A	; 10
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	a3 01       	movw	r20, r6
 6a8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__ultoa_invert>
 6ac:	88 2e       	mov	r8, r24
 6ae:	86 18       	sub	r8, r6
 6b0:	45 c0       	rjmp	.+138    	; 0x73c <vfprintf+0x2ac>
 6b2:	85 37       	cpi	r24, 0x75	; 117
 6b4:	31 f4       	brne	.+12     	; 0x6c2 <vfprintf+0x232>
 6b6:	23 2d       	mov	r18, r3
 6b8:	2f 7e       	andi	r18, 0xEF	; 239
 6ba:	b2 2e       	mov	r11, r18
 6bc:	2a e0       	ldi	r18, 0x0A	; 10
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	25 c0       	rjmp	.+74     	; 0x70c <vfprintf+0x27c>
 6c2:	93 2d       	mov	r25, r3
 6c4:	99 7f       	andi	r25, 0xF9	; 249
 6c6:	b9 2e       	mov	r11, r25
 6c8:	8f 36       	cpi	r24, 0x6F	; 111
 6ca:	c1 f0       	breq	.+48     	; 0x6fc <vfprintf+0x26c>
 6cc:	18 f4       	brcc	.+6      	; 0x6d4 <vfprintf+0x244>
 6ce:	88 35       	cpi	r24, 0x58	; 88
 6d0:	79 f0       	breq	.+30     	; 0x6f0 <vfprintf+0x260>
 6d2:	b5 c0       	rjmp	.+362    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 6d4:	80 37       	cpi	r24, 0x70	; 112
 6d6:	19 f0       	breq	.+6      	; 0x6de <vfprintf+0x24e>
 6d8:	88 37       	cpi	r24, 0x78	; 120
 6da:	21 f0       	breq	.+8      	; 0x6e4 <vfprintf+0x254>
 6dc:	b0 c0       	rjmp	.+352    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 6de:	e9 2f       	mov	r30, r25
 6e0:	e0 61       	ori	r30, 0x10	; 16
 6e2:	be 2e       	mov	r11, r30
 6e4:	b4 fe       	sbrs	r11, 4
 6e6:	0d c0       	rjmp	.+26     	; 0x702 <vfprintf+0x272>
 6e8:	fb 2d       	mov	r31, r11
 6ea:	f4 60       	ori	r31, 0x04	; 4
 6ec:	bf 2e       	mov	r11, r31
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <vfprintf+0x272>
 6f0:	34 fe       	sbrs	r3, 4
 6f2:	0a c0       	rjmp	.+20     	; 0x708 <vfprintf+0x278>
 6f4:	29 2f       	mov	r18, r25
 6f6:	26 60       	ori	r18, 0x06	; 6
 6f8:	b2 2e       	mov	r11, r18
 6fa:	06 c0       	rjmp	.+12     	; 0x708 <vfprintf+0x278>
 6fc:	28 e0       	ldi	r18, 0x08	; 8
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	05 c0       	rjmp	.+10     	; 0x70c <vfprintf+0x27c>
 702:	20 e1       	ldi	r18, 0x10	; 16
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0x27c>
 708:	20 e1       	ldi	r18, 0x10	; 16
 70a:	32 e0       	ldi	r19, 0x02	; 2
 70c:	f8 01       	movw	r30, r16
 70e:	b7 fe       	sbrs	r11, 7
 710:	07 c0       	rjmp	.+14     	; 0x720 <vfprintf+0x290>
 712:	60 81       	ld	r22, Z
 714:	71 81       	ldd	r23, Z+1	; 0x01
 716:	82 81       	ldd	r24, Z+2	; 0x02
 718:	93 81       	ldd	r25, Z+3	; 0x03
 71a:	0c 5f       	subi	r16, 0xFC	; 252
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	06 c0       	rjmp	.+12     	; 0x72c <vfprintf+0x29c>
 720:	60 81       	ld	r22, Z
 722:	71 81       	ldd	r23, Z+1	; 0x01
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 5f       	subi	r16, 0xFE	; 254
 72a:	1f 4f       	sbci	r17, 0xFF	; 255
 72c:	a3 01       	movw	r20, r6
 72e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__ultoa_invert>
 732:	88 2e       	mov	r8, r24
 734:	86 18       	sub	r8, r6
 736:	fb 2d       	mov	r31, r11
 738:	ff 77       	andi	r31, 0x7F	; 127
 73a:	3f 2e       	mov	r3, r31
 73c:	36 fe       	sbrs	r3, 6
 73e:	0d c0       	rjmp	.+26     	; 0x75a <vfprintf+0x2ca>
 740:	23 2d       	mov	r18, r3
 742:	2e 7f       	andi	r18, 0xFE	; 254
 744:	a2 2e       	mov	r10, r18
 746:	89 14       	cp	r8, r9
 748:	58 f4       	brcc	.+22     	; 0x760 <vfprintf+0x2d0>
 74a:	34 fe       	sbrs	r3, 4
 74c:	0b c0       	rjmp	.+22     	; 0x764 <vfprintf+0x2d4>
 74e:	32 fc       	sbrc	r3, 2
 750:	09 c0       	rjmp	.+18     	; 0x764 <vfprintf+0x2d4>
 752:	83 2d       	mov	r24, r3
 754:	8e 7e       	andi	r24, 0xEE	; 238
 756:	a8 2e       	mov	r10, r24
 758:	05 c0       	rjmp	.+10     	; 0x764 <vfprintf+0x2d4>
 75a:	b8 2c       	mov	r11, r8
 75c:	a3 2c       	mov	r10, r3
 75e:	03 c0       	rjmp	.+6      	; 0x766 <vfprintf+0x2d6>
 760:	b8 2c       	mov	r11, r8
 762:	01 c0       	rjmp	.+2      	; 0x766 <vfprintf+0x2d6>
 764:	b9 2c       	mov	r11, r9
 766:	a4 fe       	sbrs	r10, 4
 768:	0f c0       	rjmp	.+30     	; 0x788 <vfprintf+0x2f8>
 76a:	fe 01       	movw	r30, r28
 76c:	e8 0d       	add	r30, r8
 76e:	f1 1d       	adc	r31, r1
 770:	80 81       	ld	r24, Z
 772:	80 33       	cpi	r24, 0x30	; 48
 774:	21 f4       	brne	.+8      	; 0x77e <vfprintf+0x2ee>
 776:	9a 2d       	mov	r25, r10
 778:	99 7e       	andi	r25, 0xE9	; 233
 77a:	a9 2e       	mov	r10, r25
 77c:	09 c0       	rjmp	.+18     	; 0x790 <vfprintf+0x300>
 77e:	a2 fe       	sbrs	r10, 2
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0x2fe>
 782:	b3 94       	inc	r11
 784:	b3 94       	inc	r11
 786:	04 c0       	rjmp	.+8      	; 0x790 <vfprintf+0x300>
 788:	8a 2d       	mov	r24, r10
 78a:	86 78       	andi	r24, 0x86	; 134
 78c:	09 f0       	breq	.+2      	; 0x790 <vfprintf+0x300>
 78e:	b3 94       	inc	r11
 790:	a3 fc       	sbrc	r10, 3
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <vfprintf+0x326>
 794:	a0 fe       	sbrs	r10, 0
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0x314>
 798:	b2 14       	cp	r11, r2
 79a:	88 f4       	brcc	.+34     	; 0x7be <vfprintf+0x32e>
 79c:	28 0c       	add	r2, r8
 79e:	92 2c       	mov	r9, r2
 7a0:	9b 18       	sub	r9, r11
 7a2:	0e c0       	rjmp	.+28     	; 0x7c0 <vfprintf+0x330>
 7a4:	b2 14       	cp	r11, r2
 7a6:	60 f4       	brcc	.+24     	; 0x7c0 <vfprintf+0x330>
 7a8:	b6 01       	movw	r22, r12
 7aa:	80 e2       	ldi	r24, 0x20	; 32
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 7b2:	b3 94       	inc	r11
 7b4:	f7 cf       	rjmp	.-18     	; 0x7a4 <vfprintf+0x314>
 7b6:	b2 14       	cp	r11, r2
 7b8:	18 f4       	brcc	.+6      	; 0x7c0 <vfprintf+0x330>
 7ba:	2b 18       	sub	r2, r11
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x332>
 7be:	98 2c       	mov	r9, r8
 7c0:	21 2c       	mov	r2, r1
 7c2:	a4 fe       	sbrs	r10, 4
 7c4:	10 c0       	rjmp	.+32     	; 0x7e6 <vfprintf+0x356>
 7c6:	b6 01       	movw	r22, r12
 7c8:	80 e3       	ldi	r24, 0x30	; 48
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 7d0:	a2 fe       	sbrs	r10, 2
 7d2:	17 c0       	rjmp	.+46     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d4:	a1 fc       	sbrc	r10, 1
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x34e>
 7d8:	88 e7       	ldi	r24, 0x78	; 120
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x352>
 7de:	88 e5       	ldi	r24, 0x58	; 88
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	b6 01       	movw	r22, r12
 7e4:	0c c0       	rjmp	.+24     	; 0x7fe <vfprintf+0x36e>
 7e6:	8a 2d       	mov	r24, r10
 7e8:	86 78       	andi	r24, 0x86	; 134
 7ea:	59 f0       	breq	.+22     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ec:	a1 fe       	sbrs	r10, 1
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x364>
 7f0:	8b e2       	ldi	r24, 0x2B	; 43
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <vfprintf+0x366>
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	a7 fc       	sbrc	r10, 7
 7f8:	8d e2       	ldi	r24, 0x2D	; 45
 7fa:	b6 01       	movw	r22, r12
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 802:	89 14       	cp	r8, r9
 804:	38 f4       	brcc	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 806:	b6 01       	movw	r22, r12
 808:	80 e3       	ldi	r24, 0x30	; 48
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 810:	9a 94       	dec	r9
 812:	f7 cf       	rjmp	.-18     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 814:	8a 94       	dec	r8
 816:	f3 01       	movw	r30, r6
 818:	e8 0d       	add	r30, r8
 81a:	f1 1d       	adc	r31, r1
 81c:	80 81       	ld	r24, Z
 81e:	b6 01       	movw	r22, r12
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 826:	81 10       	cpse	r8, r1
 828:	f5 cf       	rjmp	.-22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 82a:	22 20       	and	r2, r2
 82c:	09 f4       	brne	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82e:	42 ce       	rjmp	.-892    	; 0x4b4 <vfprintf+0x24>
 830:	b6 01       	movw	r22, r12
 832:	80 e2       	ldi	r24, 0x20	; 32
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 3f 04 	call	0x87e	; 0x87e <fputc>
 83a:	2a 94       	dec	r2
 83c:	f6 cf       	rjmp	.-20     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 83e:	f6 01       	movw	r30, r12
 840:	86 81       	ldd	r24, Z+6	; 0x06
 842:	97 81       	ldd	r25, Z+7	; 0x07
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	9f ef       	ldi	r25, 0xFF	; 255
 84a:	2b 96       	adiw	r28, 0x0b	; 11
 84c:	e2 e1       	ldi	r30, 0x12	; 18
 84e:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__epilogue_restores__>

00000852 <strnlen_P>:
 852:	fc 01       	movw	r30, r24
 854:	05 90       	lpm	r0, Z+
 856:	61 50       	subi	r22, 0x01	; 1
 858:	70 40       	sbci	r23, 0x00	; 0
 85a:	01 10       	cpse	r0, r1
 85c:	d8 f7       	brcc	.-10     	; 0x854 <strnlen_P+0x2>
 85e:	80 95       	com	r24
 860:	90 95       	com	r25
 862:	8e 0f       	add	r24, r30
 864:	9f 1f       	adc	r25, r31
 866:	08 95       	ret

00000868 <strnlen>:
 868:	fc 01       	movw	r30, r24
 86a:	61 50       	subi	r22, 0x01	; 1
 86c:	70 40       	sbci	r23, 0x00	; 0
 86e:	01 90       	ld	r0, Z+
 870:	01 10       	cpse	r0, r1
 872:	d8 f7       	brcc	.-10     	; 0x86a <strnlen+0x2>
 874:	80 95       	com	r24
 876:	90 95       	com	r25
 878:	8e 0f       	add	r24, r30
 87a:	9f 1f       	adc	r25, r31
 87c:	08 95       	ret

0000087e <fputc>:
 87e:	0f 93       	push	r16
 880:	1f 93       	push	r17
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	fb 01       	movw	r30, r22
 888:	23 81       	ldd	r18, Z+3	; 0x03
 88a:	21 fd       	sbrc	r18, 1
 88c:	03 c0       	rjmp	.+6      	; 0x894 <fputc+0x16>
 88e:	8f ef       	ldi	r24, 0xFF	; 255
 890:	9f ef       	ldi	r25, 0xFF	; 255
 892:	2c c0       	rjmp	.+88     	; 0x8ec <fputc+0x6e>
 894:	22 ff       	sbrs	r18, 2
 896:	16 c0       	rjmp	.+44     	; 0x8c4 <fputc+0x46>
 898:	46 81       	ldd	r20, Z+6	; 0x06
 89a:	57 81       	ldd	r21, Z+7	; 0x07
 89c:	24 81       	ldd	r18, Z+4	; 0x04
 89e:	35 81       	ldd	r19, Z+5	; 0x05
 8a0:	42 17       	cp	r20, r18
 8a2:	53 07       	cpc	r21, r19
 8a4:	44 f4       	brge	.+16     	; 0x8b6 <fputc+0x38>
 8a6:	a0 81       	ld	r26, Z
 8a8:	b1 81       	ldd	r27, Z+1	; 0x01
 8aa:	9d 01       	movw	r18, r26
 8ac:	2f 5f       	subi	r18, 0xFF	; 255
 8ae:	3f 4f       	sbci	r19, 0xFF	; 255
 8b0:	31 83       	std	Z+1, r19	; 0x01
 8b2:	20 83       	st	Z, r18
 8b4:	8c 93       	st	X, r24
 8b6:	26 81       	ldd	r18, Z+6	; 0x06
 8b8:	37 81       	ldd	r19, Z+7	; 0x07
 8ba:	2f 5f       	subi	r18, 0xFF	; 255
 8bc:	3f 4f       	sbci	r19, 0xFF	; 255
 8be:	37 83       	std	Z+7, r19	; 0x07
 8c0:	26 83       	std	Z+6, r18	; 0x06
 8c2:	14 c0       	rjmp	.+40     	; 0x8ec <fputc+0x6e>
 8c4:	8b 01       	movw	r16, r22
 8c6:	ec 01       	movw	r28, r24
 8c8:	fb 01       	movw	r30, r22
 8ca:	00 84       	ldd	r0, Z+8	; 0x08
 8cc:	f1 85       	ldd	r31, Z+9	; 0x09
 8ce:	e0 2d       	mov	r30, r0
 8d0:	09 95       	icall
 8d2:	89 2b       	or	r24, r25
 8d4:	e1 f6       	brne	.-72     	; 0x88e <fputc+0x10>
 8d6:	d8 01       	movw	r26, r16
 8d8:	16 96       	adiw	r26, 0x06	; 6
 8da:	8d 91       	ld	r24, X+
 8dc:	9c 91       	ld	r25, X
 8de:	17 97       	sbiw	r26, 0x07	; 7
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	17 96       	adiw	r26, 0x07	; 7
 8e4:	9c 93       	st	X, r25
 8e6:	8e 93       	st	-X, r24
 8e8:	16 97       	sbiw	r26, 0x06	; 6
 8ea:	ce 01       	movw	r24, r28
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	1f 91       	pop	r17
 8f2:	0f 91       	pop	r16
 8f4:	08 95       	ret

000008f6 <__ultoa_invert>:
 8f6:	fa 01       	movw	r30, r20
 8f8:	aa 27       	eor	r26, r26
 8fa:	28 30       	cpi	r18, 0x08	; 8
 8fc:	51 f1       	breq	.+84     	; 0x952 <__stack+0x53>
 8fe:	20 31       	cpi	r18, 0x10	; 16
 900:	81 f1       	breq	.+96     	; 0x962 <__stack+0x63>
 902:	e8 94       	clt
 904:	6f 93       	push	r22
 906:	6e 7f       	andi	r22, 0xFE	; 254
 908:	6e 5f       	subi	r22, 0xFE	; 254
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	af 4f       	sbci	r26, 0xFF	; 255
 912:	b1 e0       	ldi	r27, 0x01	; 1
 914:	3e d0       	rcall	.+124    	; 0x992 <__stack+0x93>
 916:	b4 e0       	ldi	r27, 0x04	; 4
 918:	3c d0       	rcall	.+120    	; 0x992 <__stack+0x93>
 91a:	67 0f       	add	r22, r23
 91c:	78 1f       	adc	r23, r24
 91e:	89 1f       	adc	r24, r25
 920:	9a 1f       	adc	r25, r26
 922:	a1 1d       	adc	r26, r1
 924:	68 0f       	add	r22, r24
 926:	79 1f       	adc	r23, r25
 928:	8a 1f       	adc	r24, r26
 92a:	91 1d       	adc	r25, r1
 92c:	a1 1d       	adc	r26, r1
 92e:	6a 0f       	add	r22, r26
 930:	71 1d       	adc	r23, r1
 932:	81 1d       	adc	r24, r1
 934:	91 1d       	adc	r25, r1
 936:	a1 1d       	adc	r26, r1
 938:	20 d0       	rcall	.+64     	; 0x97a <__stack+0x7b>
 93a:	09 f4       	brne	.+2      	; 0x93e <__stack+0x3f>
 93c:	68 94       	set
 93e:	3f 91       	pop	r19
 940:	2a e0       	ldi	r18, 0x0A	; 10
 942:	26 9f       	mul	r18, r22
 944:	11 24       	eor	r1, r1
 946:	30 19       	sub	r19, r0
 948:	30 5d       	subi	r19, 0xD0	; 208
 94a:	31 93       	st	Z+, r19
 94c:	de f6       	brtc	.-74     	; 0x904 <__stack+0x5>
 94e:	cf 01       	movw	r24, r30
 950:	08 95       	ret
 952:	46 2f       	mov	r20, r22
 954:	47 70       	andi	r20, 0x07	; 7
 956:	40 5d       	subi	r20, 0xD0	; 208
 958:	41 93       	st	Z+, r20
 95a:	b3 e0       	ldi	r27, 0x03	; 3
 95c:	0f d0       	rcall	.+30     	; 0x97c <__stack+0x7d>
 95e:	c9 f7       	brne	.-14     	; 0x952 <__stack+0x53>
 960:	f6 cf       	rjmp	.-20     	; 0x94e <__stack+0x4f>
 962:	46 2f       	mov	r20, r22
 964:	4f 70       	andi	r20, 0x0F	; 15
 966:	40 5d       	subi	r20, 0xD0	; 208
 968:	4a 33       	cpi	r20, 0x3A	; 58
 96a:	18 f0       	brcs	.+6      	; 0x972 <__stack+0x73>
 96c:	49 5d       	subi	r20, 0xD9	; 217
 96e:	31 fd       	sbrc	r19, 1
 970:	40 52       	subi	r20, 0x20	; 32
 972:	41 93       	st	Z+, r20
 974:	02 d0       	rcall	.+4      	; 0x97a <__stack+0x7b>
 976:	a9 f7       	brne	.-22     	; 0x962 <__stack+0x63>
 978:	ea cf       	rjmp	.-44     	; 0x94e <__stack+0x4f>
 97a:	b4 e0       	ldi	r27, 0x04	; 4
 97c:	a6 95       	lsr	r26
 97e:	97 95       	ror	r25
 980:	87 95       	ror	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	ba 95       	dec	r27
 988:	c9 f7       	brne	.-14     	; 0x97c <__stack+0x7d>
 98a:	00 97       	sbiw	r24, 0x00	; 0
 98c:	61 05       	cpc	r22, r1
 98e:	71 05       	cpc	r23, r1
 990:	08 95       	ret
 992:	9b 01       	movw	r18, r22
 994:	ac 01       	movw	r20, r24
 996:	0a 2e       	mov	r0, r26
 998:	06 94       	lsr	r0
 99a:	57 95       	ror	r21
 99c:	47 95       	ror	r20
 99e:	37 95       	ror	r19
 9a0:	27 95       	ror	r18
 9a2:	ba 95       	dec	r27
 9a4:	c9 f7       	brne	.-14     	; 0x998 <__stack+0x99>
 9a6:	62 0f       	add	r22, r18
 9a8:	73 1f       	adc	r23, r19
 9aa:	84 1f       	adc	r24, r20
 9ac:	95 1f       	adc	r25, r21
 9ae:	a0 1d       	adc	r26, r0
 9b0:	08 95       	ret

000009b2 <__prologue_saves__>:
 9b2:	2f 92       	push	r2
 9b4:	3f 92       	push	r3
 9b6:	4f 92       	push	r4
 9b8:	5f 92       	push	r5
 9ba:	6f 92       	push	r6
 9bc:	7f 92       	push	r7
 9be:	8f 92       	push	r8
 9c0:	9f 92       	push	r9
 9c2:	af 92       	push	r10
 9c4:	bf 92       	push	r11
 9c6:	cf 92       	push	r12
 9c8:	df 92       	push	r13
 9ca:	ef 92       	push	r14
 9cc:	ff 92       	push	r15
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
 9da:	ca 1b       	sub	r28, r26
 9dc:	db 0b       	sbc	r29, r27
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	09 94       	ijmp

000009ea <__epilogue_restores__>:
 9ea:	2a 88       	ldd	r2, Y+18	; 0x12
 9ec:	39 88       	ldd	r3, Y+17	; 0x11
 9ee:	48 88       	ldd	r4, Y+16	; 0x10
 9f0:	5f 84       	ldd	r5, Y+15	; 0x0f
 9f2:	6e 84       	ldd	r6, Y+14	; 0x0e
 9f4:	7d 84       	ldd	r7, Y+13	; 0x0d
 9f6:	8c 84       	ldd	r8, Y+12	; 0x0c
 9f8:	9b 84       	ldd	r9, Y+11	; 0x0b
 9fa:	aa 84       	ldd	r10, Y+10	; 0x0a
 9fc:	b9 84       	ldd	r11, Y+9	; 0x09
 9fe:	c8 84       	ldd	r12, Y+8	; 0x08
 a00:	df 80       	ldd	r13, Y+7	; 0x07
 a02:	ee 80       	ldd	r14, Y+6	; 0x06
 a04:	fd 80       	ldd	r15, Y+5	; 0x05
 a06:	0c 81       	ldd	r16, Y+4	; 0x04
 a08:	1b 81       	ldd	r17, Y+3	; 0x03
 a0a:	aa 81       	ldd	r26, Y+2	; 0x02
 a0c:	b9 81       	ldd	r27, Y+1	; 0x01
 a0e:	ce 0f       	add	r28, r30
 a10:	d1 1d       	adc	r29, r1
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	de bf       	out	0x3e, r29	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	cd bf       	out	0x3d, r28	; 61
 a1c:	ed 01       	movw	r28, r26
 a1e:	08 95       	ret

00000a20 <_exit>:
 a20:	f8 94       	cli

00000a22 <__stop_program>:
 a22:	ff cf       	rjmp	.-2      	; 0xa22 <__stop_program>
